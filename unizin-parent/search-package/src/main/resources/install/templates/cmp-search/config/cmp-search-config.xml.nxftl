<#escape x as x?xml>
<?xml version="1.0"?>
<component name="org.unizin.cmp.elasticsearch.config">
  <require>org.nuxeo.elasticsearch.defaultConfig</require>

    <#if "${elasticsearch.addressList}" == "">
      <extension target="org.nuxeo.elasticsearch.ElasticSearchComponent"
                 point="elasticSearchLocal">
        <elasticSearchLocal
                clusterName="${elasticsearch.clusterName}"
                nodeName="${elasticsearch.nodeName}"
                pathData="${nuxeo.data.dir}/elasticsearch"
                pathLogs="${nuxeo.log.dir}/elasticsearch"
                httpEnabled="${elasticsearch.httpEnabled}"
                networkHost="${elasticsearch.networkHost}" />
      </extension>
    <#else>
      <extension target="org.nuxeo.elasticsearch.ElasticSearchComponent"
                 point="elasticSearchRemote">
        <elasticSearchRemote
                clusterName="${elasticsearch.clusterName}"
                addressList="${elasticsearch.addressList}"
                clientTransportSniff="false"
                clientTransportIgnoreClusterName="false"
                clientTransportPingTimeout="5s"
                clientTransportNodesSamplerInterval="5s" />
      </extension>
    </#if>

  <extension target="org.nuxeo.elasticsearch.ElasticSearchComponent"
             point="elasticSearchIndex">
    <elasticSearchIndex name="${elasticsearch.indexName}" type="doc" repository="default">
      <fetchFromSource>
        <include>ecm:*</include>
        <include>dc:*</include>
        <exclude>ecm:binarytext</exclude>
      </fetchFromSource>
      <!-- @formatter:off -->
      <settings>
      {
<#if "${elasticsearch.addressList}" != "">
   "number_of_shards" : "${elasticsearch.indexNumberOfShards}",
   "number_of_replicas" : "${elasticsearch.indexNumberOfReplicas}",
</#if>
   "analysis" : {
      "filter" : {
         "truncate_filter" : {
            "length" : 256,
            "type" : "truncate"
         },
         "word_delimiter_filter" : {
           "type" : "word_delimiter",
           "preserve_original" : true
         },
         "asciifolding_filter" : {
            "type" : "asciifolding",
            "preserve_original" : true
         },
         "en_stem_filter" : {
            "name" : "minimal_english",
            "type" : "stemmer"
         },
         "en_stop_filter" : {
            "stopwords" : [
               "_english_"
            ],
            "type" : "stop"
         },
         "fr_elision_filter" : {
            "articles" : [
               "c",
               "l",
               "m",
               "t",
               "qu",
               "n",
               "s",
               "j"
            ],
            "type" : "elision"
         },
         "fr_stem_filter" : {
            "name" : "minimal_french",
            "type" : "stemmer"
         },
         "fr_stop_filter" : {
            "stopwords" : [
               "_french_"
            ],
            "type" : "stop"
         }
      },
      "tokenizer" : {
         "path_tokenizer" : {
            "delimiter" : "/",
            "type" : "path_hierarchy"
         }
      },
      "analyzer" : {
         "en_analyzer" : {
            "alias" : "fulltext",
            "char_filter":  [ "html_strip"],
            "filter" : [
               "word_delimiter_filter",
               "lowercase",
               "en_stop_filter",
               "en_stem_filter",
               "asciifolding_filter"
            ],
            "type" : "custom",
            "tokenizer" : "standard"
         },
         "fr_analyzer" : {
            "char_filter":  [ "html_strip"],
            "filter" : [
               "word_delimiter_filter",
               "lowercase",
               "fr_stop_filter",
               "fr_stem_filter",
               "asciifolding_filter",
               "fr_elision_filter"
            ],
            "type" : "custom",
            "tokenizer" : "standard"
         },
         "path_analyzer" : {
            "type" : "custom",
            "tokenizer" : "path_tokenizer"
         },
         "lowercase_analyzer" : {
            "type" : "custom",
            "filter" : [ "truncate_filter", "lowercase", "asciifolding" ],
            "tokenizer" : "keyword"
         },
         "default" : {
            "type" : "custom",
            "filter" : [ "truncate_filter" ],
            "tokenizer" : "keyword"
         }
      }
   }
}
      </settings>
      <mapping>
{
    "_all": {
        "analyzer": "fulltext"
    },
    "_size": {
        "enabled": true
    },
    "dynamic_templates": [
        {
            "no_thumbnail_template": {
                "mapping": {
                    "include_in_all": false,
                    "index": "no"
                },
                "path_match": "thumb:thumbnail.*"
            }
        },
        {
            "no_picture_template": {
                "mapping": {
                    "include_in_all": false,
                    "index": "no"
                },
                "path_match": "picture:views.*"
            }
        }
    ],
    "properties": {
        "common:icon": {
            "include_in_all": false,
            "index": "no",
            "type": "string"
        },
        "dc:created": {
            "format": "dateOptionalTime",
            "type": "date"
        },
        "dc:description": {
            "fields": {
                "dc:description": {
                    "include_in_all": true,
                    "index": "no",
                    "type": "string"
                },
                "fulltext": {
                    "analyzer": "fulltext",
                    "boost": 1.5,
                    "type": "string"
                }
            },
            "type": "multi_field"
        },
        "hrv:description": {
            "fields": {
                "hrv:description": {
                    "include_in_all": true,
                    "index": "no",
                    "type": "string"
                },
                "fulltext": {
                    "analyzer": "fulltext",
                    "boost": 1.5,
                    "type": "string"
                }
            },
            "type": "multi_field"
        },
        "dc:modified": {
            "format": "dateOptionalTime",
            "type": "date"
        },
        "dc:title": {
            "fields": {
                "dc:title": {
                    "type": "string"
                },
                "fulltext": {
                    "analyzer": "fulltext",
                    "boost": 2,
                    "type": "string"
                }
            },
            "type": "multi_field"
        },
        "hrv:subject": {
            "fields": {
                "hrv:subject": {
                    "type": "string"
                },
                "fulltext": {
                    "analyzer": "fulltext",
                    "boost": 2,
                    "type": "string"
                }
            },
            "type": "multi_field"
        },
        "ecm:binarytext": {
            "include_in_all": true,
            "index": "no",
            "type": "string"
        },
        "ecm:path": {
            "fields": {
                "children": {
                    "index_analyzer": "path_analyzer",
                    "search_analyzer": "keyword",
                    "type": "string"
                },
                "ecm:path": {
                    "index": "not_analyzed",
                    "type": "string"
                }
            },
            "type": "multi_field"
        },
        "ecm:pos": {
            "type": "integer"
        },
        "note:note": {
            "fields": {
                "fulltext": {
                    "analyzer": "fulltext",
                    "type": "string"
                },
                "note:note": {
                    "include_in_all": true,
                    "index": "no",
                    "type": "string"
                }
            },
            "type": "multi_field"
        }
    }
}

      </mapping>
      <!-- @formatter:on -->

    </elasticSearchIndex>
  </extension>

</component>
</#escape>
